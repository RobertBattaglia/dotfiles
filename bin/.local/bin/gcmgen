#!/usr/bin/env bash

if [ -z "$(command -v cody)" ]; then
    echo "Cody CLI is required to run this script."
    echo -e 'More Info: \e]8;;https://sourcegraph.com/docs/cody/clients/install-cli\ahttps://sourcegraph.com/docs/cody/clients/install-cli\e]8;;\a'
    exit 1
fi

prefix=""
ticket=$(git rev-parse --abbrev-ref HEAD | grep -Eo '[A-Z]+-[0-9]+')

if [ -n "$ticket" ]; then
    prefix="${ticket}: "
fi

prompt="
[INSTRUCTION]
write 5 different commit message for this diff, separated by '---' without \n.

[RULES]
Imagine you are a developer 5 years in the future searching through commit messages to explain why some piece of code is the way it is
Capture the most important 1 or 2 changes.
Unless it is the only change, ignore the following:
1) Code Style and Formatting
2) renaming variables
3) Fixing typos
Try to capture the highest level summary, do not hyper focus on any one or two changes, unless those are the only changes.
Do not use semantic commit messages which prefix the commit message.

[FORMAT]
Do not explain the reasoning just output the actual commit messages, separated by '---' without \n.
This is cricial because the output is piped into another command

[EXAMPLE]
<COMMIT MESSAGE 1>---<COMMIT MESSAGE 2>---<COMMIT MESSAGE 3>---<COMMIT MESSAGE 4>---<COMMIT MESSAGE 5>
"

temp_file=$(mktemp)
echo "Generating commit messages... Please wait."
git diff --cached | cody chat --stdin -m "$prompt" > "$temp_file" 2>/dev/null
cody_response=$(cat "$temp_file" | tr '\n' ' ' | sed 's/^.*<\/think>//g' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')
rm "$temp_file"

# Split the response into an array
IFS='---' read -ra messages <<< "$cody_response"
echo ${#messages[@]} messages found.

# Function to display a message and get user choice
display_message() {
    local message="$1"
    echo
    echo -e "\033[1mGenerated Commit Message:\033[0m"
    echo "${prefix}${message}"
    echo
    PS3="Select an option (1-4): "
    options=("Use this message" "See next message" "Manual Edit" "Cancel")
    select opt in "${options[@]}"; do
        case $opt in
            "Use this message")
                git commit -m "${prefix}${message}"
                exit 0
                ;;
            "See next message")
                return 1
                ;;
            "Manual Edit")
                echo "${prefix}${message}" | git commit -e -F -
                exit 0
                ;;
            "Cancel")
                echo "Commit cancelled."
                exit 0
                ;;
            *)
                echo "Invalid option. Please try again."
                ;;
        esac
    done
}

for message in "${messages[@]}"; do
    if [ -z "$message" ]; then
    	continue
    fi

    if display_message "$message"; then
        # Message was used or manually edited, exit the loop
        break
    fi
done

if [ ${#messages[@]} -eq 0 ]; then
    echo "No valid commit messages were generated. Please try again."
    echo "Your diff might be too much context"
    exit 1
fi

echo "No more messages to display. Exiting."
